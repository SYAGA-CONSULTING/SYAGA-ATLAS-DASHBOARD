#!/usr/bin/env python3
"""
ATLAS - D√©ploiement R√âEL sur serveurs SharePoint
Phase par phase avec contr√¥le total
"""

import json
import base64
import requests
from datetime import datetime
import time
import os
from pathlib import Path

class RealServerDeployment:
    def __init__(self):
        # Charger config SP √©lev√©
        with open(Path.home() / ".azure_elevated_sp.json") as f:
            self.sp_config = json.load(f)
        
        self.tenant_id = self.sp_config["TenantId"]
        self.client_id = self.sp_config["ClientId"]
        self.client_secret = self.sp_config["ClientSecret"]
        
        # SharePoint correct
        self.site_url = "https://syagacons.sharepoint.com/sites/SYAGA-ATLAS"
        self.token = None
        
    def get_token(self):
        """Obtenir token Microsoft Graph"""
        token_url = f"https://login.microsoftonline.com/{self.tenant_id}/oauth2/v2.0/token"
        
        body = {
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "scope": "https://graph.microsoft.com/.default",
            "grant_type": "client_credentials"
        }
        
        response = requests.post(token_url, data=body)
        if response.status_code == 200:
            self.token = response.json()["access_token"]
            return True
        else:
            print(f"‚ùå Erreur auth: {response.status_code}")
            return False
    
    def deploy_phase1_validation(self):
        """D√©ployer script validation v10.3 via UPDATE_CONFIG"""
        print("\nüìã PHASE 1: Validation v10.3 sur serveurs r√©els")
        print("=" * 60)
        
        # Lire le script Phase 1
        phase1_script = """
# ATLAS VALIDATION v10.3 - D√©ploiement r√©el
$Results = @{
    Hostname = $env:COMPUTERNAME
    Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Version = "v10.3"
    Tests = @{}
}

Write-Host "Validation ATLAS v10.3 sur $env:COMPUTERNAME" -ForegroundColor Cyan

# Test 1: Agent pr√©sent
if (Test-Path "C:\SYAGA-ATLAS\agent.ps1") {
    $Results.Tests["Agent"] = "PASS"
    Write-Host "‚úì Agent pr√©sent" -ForegroundColor Green
} else {
    $Results.Tests["Agent"] = "FAIL"
    Write-Host "‚úó Agent manquant" -ForegroundColor Red
}

# Test 2: T√¢ches planifi√©es
$agentTask = Get-ScheduledTask -TaskName "SYAGA-ATLAS-Agent" -ErrorAction SilentlyContinue
$updaterTask = Get-ScheduledTask -TaskName "SYAGA-ATLAS-Updater" -ErrorAction SilentlyContinue

if ($agentTask -and $updaterTask) {
    $Results.Tests["Tasks"] = "PASS"
    Write-Host "‚úì T√¢ches OK" -ForegroundColor Green
} else {
    $Results.Tests["Tasks"] = "FAIL"
    Write-Host "‚úó T√¢ches manquantes" -ForegroundColor Red
}

# Test 3: Backup
$backupPath = "C:\SYAGA-BACKUP-v10.3"
if (-not (Test-Path $backupPath)) {
    Copy-Item -Path "C:\SYAGA-ATLAS" -Destination $backupPath -Recurse -Force
    $Results.Tests["Backup"] = "CREATED"
    Write-Host "‚úì Backup cr√©√©" -ForegroundColor Green
} else {
    $Results.Tests["Backup"] = "EXISTS"
    Write-Host "‚úì Backup existant" -ForegroundColor Green
}

# Test 4: Performance
$cpu = (Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average).Average
$Results.Tests["CPU"] = $cpu

# Envoyer r√©sultats √† SharePoint
try {
    # Cr√©er entr√©e dans SharePoint avec r√©sultats
    $jsonResults = $Results | ConvertTo-Json -Compress
    
    # Pour UPDATE-ATLAS.ps1 compatibility
    $State = if ($Results.Tests.Values -contains "FAIL") { "NEEDS_ATTENTION" } else { "VALIDATED" }
    
    # Mettre √† jour via m√©thode standard agent
    Write-Host "R√©sultats validation: $State" -ForegroundColor Yellow
    
    # Cr√©er fichier local de r√©sultats
    $Results | ConvertTo-Json | Out-File "C:\SYAGA-ATLAS\validation-results.json" -Encoding UTF8
    
} catch {
    Write-Host "Erreur envoi r√©sultats: $_" -ForegroundColor Red
}

Write-Host "Validation termin√©e sur $env:COMPUTERNAME" -ForegroundColor Green
"""
        
        # Encoder en Base64
        script_b64 = base64.b64encode(phase1_script.encode('utf-8')).decode('ascii')
        
        # Cr√©er UPDATE_CONFIG
        headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json;charset=utf-8"
        }
        
        # Payload pour UPDATE_CONFIG
        update_config = {
            "fields": {
                "Title": "UPDATE_CONFIG",
                "VeeamStatus": script_b64,  # Le champ que UPDATE-ATLAS.ps1 cherche
                "State": "PHASE1_VALIDATION",
                "DiskSpaceGB": "1001",  # Version sp√©ciale pour phase 1
                "Modified": datetime.utcnow().isoformat() + "Z"
            }
        }
        
        # V√©rifier si UPDATE_CONFIG existe
        check_url = f"{self.site_url}/_api/web/lists/getbytitle('ATLAS-Servers')/items?$filter=Title eq 'UPDATE_CONFIG'"
        
        try:
            check_response = requests.get(check_url, headers=headers)
            
            if check_response.status_code == 200:
                data = check_response.json()
                
                if data.get("value"):  # API v2 format
                    # Mettre √† jour existant
                    item_id = data["value"][0]["id"]
                    update_url = f"{self.site_url}/_api/web/lists/getbytitle('ATLAS-Servers')/items('{item_id}')"
                    
                    headers["IF-MATCH"] = "*"
                    response = requests.patch(update_url, headers=headers, json=update_config)
                    
                    if response.status_code in [200, 204]:
                        print("‚úÖ UPDATE_CONFIG mis √† jour pour Phase 1")
                        return True
                else:
                    # Cr√©er nouveau
                    create_url = f"{self.site_url}/_api/web/lists/getbytitle('ATLAS-Servers')/items"
                    response = requests.post(create_url, headers=headers, json=update_config)
                    
                    if response.status_code == 201:
                        print("‚úÖ UPDATE_CONFIG cr√©√© pour Phase 1")
                        return True
                        
        except Exception as e:
            print(f"‚ùå Erreur d√©ploiement: {e}")
            
        return False
    
    def wait_for_results(self, phase_name, timeout_minutes=5):
        """Attendre les r√©sultats des agents"""
        print(f"\n‚è≥ Attente r√©sultats {phase_name} (max {timeout_minutes} min)...")
        
        headers = {
            "Authorization": f"Bearer {self.token}",
            "Accept": "application/json"
        }
        
        start_time = time.time()
        timeout = timeout_minutes * 60
        
        while time.time() - start_time < timeout:
            try:
                # Chercher les serveurs mis √† jour
                url = f"{self.site_url}/_api/web/lists/getbytitle('ATLAS-Servers')/items?$filter=State eq 'VALIDATED'"
                response = requests.get(url, headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    servers = data.get("value", [])
                    
                    if servers:
                        print(f"\n‚úÖ {len(servers)} serveur(s) valid√©(s):")
                        for server in servers:
                            print(f"  - {server.get('Title', 'Unknown')}: {server.get('State', 'N/A')}")
                        return True
                        
            except Exception as e:
                print(f".", end="", flush=True)
            
            time.sleep(30)
        
        print("\n‚è±Ô∏è Timeout - Pas de r√©sultats")
        return False
    
    def cleanup_update_config(self):
        """Nettoyer UPDATE_CONFIG apr√®s d√©ploiement"""
        print("\nüßπ Nettoyage UPDATE_CONFIG...")
        
        headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json;charset=utf-8"
        }
        
        update_config = {
            "fields": {
                "VeeamStatus": "",  # Vider le script
                "State": "COMPLETED",
                "Modified": datetime.utcnow().isoformat() + "Z"
            }
        }
        
        try:
            check_url = f"{self.site_url}/_api/web/lists/getbytitle('ATLAS-Servers')/items?$filter=Title eq 'UPDATE_CONFIG'"
            check_response = requests.get(check_url, headers=headers)
            
            if check_response.status_code == 200:
                data = check_response.json()
                if data.get("value"):
                    item_id = data["value"][0]["id"]
                    update_url = f"{self.site_url}/_api/web/lists/getbytitle('ATLAS-Servers')/items('{item_id}')"
                    
                    headers["IF-MATCH"] = "*"
                    requests.patch(update_url, headers=headers, json=update_config)
                    print("‚úÖ UPDATE_CONFIG nettoy√©")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur nettoyage: {e}")
    
    def run_deployment(self):
        """Orchestration du d√©ploiement phase par phase"""
        print("üöÄ D√âPLOIEMENT R√âEL ATLAS - PHASES 1-3")
        print("=" * 60)
        
        # Authentification
        if not self.get_token():
            print("‚ùå √âchec authentification")
            return
        
        print("‚úÖ Authentification r√©ussie")
        
        # Phase 1: Validation
        if self.deploy_phase1_validation():
            print("üì° Script envoy√© aux agents via UPDATE_CONFIG")
            print("‚è∞ Les agents vont l'ex√©cuter dans ~2 minutes")
            
            # Attendre r√©sultats
            if self.wait_for_results("Phase 1"):
                print("\n‚úÖ PHASE 1 COMPL√âT√âE - v10.3 valid√©e")
                
                # Continuer avec Phase 2 si succ√®s
                print("\nüîÑ Pr√™t pour Phase 2: Tests rollback")
                # self.deploy_phase2_rollback()
                
            else:
                print("\n‚ö†Ô∏è Phase 1 incompl√®te - V√©rifier manuellement")
        
        # Nettoyer
        self.cleanup_update_config()
        
        print("\n‚úÖ D√©ploiement termin√©")

if __name__ == "__main__":
    deployer = RealServerDeployment()
    deployer.run_deployment()