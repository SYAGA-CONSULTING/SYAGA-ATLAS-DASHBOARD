# WINDOWS UPDATE ORCHESTRATOR v1.0
# Gestion intelligente des d√©pendances Hyper-V et Veeam

param(
    [Parameter(Mandatory=$false)]
    [string]$Action = "Analyze",  # Analyze | Plan | Execute | Status
    [string]$TargetServer = $env:COMPUTERNAME
)

$VERSION = "v1.0"
Write-Host "üéØ WINDOWS UPDATE ORCHESTRATOR $VERSION" -ForegroundColor Cyan
Write-Host "=" * 60

# Configuration
$SharePointConfig = @{
    TenantId = "6027d81c-ad9b-48f5-9da6-96f1bad11429"
    ClientId = "f66a8c6c-1037-41b8-be3c-4f6e67c1f49e"
    ClientSecret = "[REDACTED]"  # Remplacer par le vrai secret
    SiteId = "syagacons.sharepoint.com,4cce268e-9cb7-4829-8c1c-3c85faa1810d,8cb3611e-c4aa-4105-b55d-2247e4fac8c8"
    ListId = "94dc7ad4-740f-4c1f-b99c-107e01c8f70b"
}

# Fonction pour obtenir token
function Get-GraphToken {
    $tokenUrl = "https://login.microsoftonline.com/$($SharePointConfig.TenantId)/oauth2/v2.0/token"
    $body = @{
        client_id = $SharePointConfig.ClientId
        client_secret = $SharePointConfig.ClientSecret
        scope = "https://graph.microsoft.com/.default"
        grant_type = "client_credentials"
    }
    return (Invoke-RestMethod -Uri $tokenUrl -Method Post -Body $body).access_token
}

# Fonction pour obtenir l'infrastructure depuis SharePoint
function Get-Infrastructure {
    Write-Host "üìä R√©cup√©ration infrastructure depuis SharePoint..." -ForegroundColor Yellow
    
    $token = Get-GraphToken
    $headers = @{Authorization = "Bearer $token"}
    $listUrl = "https://graph.microsoft.com/v1.0/sites/$($SharePointConfig.SiteId)/lists/$($SharePointConfig.ListId)/items?`$expand=fields"
    
    $items = Invoke-RestMethod -Uri $listUrl -Headers $headers
    
    $infrastructure = @{
        HyperVHosts = @()
        VMs = @()
        VeeamServers = @()
        StandaloneServers = @()
    }
    
    foreach ($item in $items.value) {
        $server = $item.fields
        
        # Identifier les h√¥tes Hyper-V
        if ($server.HyperVStatus -and $server.HyperVStatus -like "*VM*") {
            $vmCount = 0
            if ($server.HyperVStatus -match "(\d+)") {
                $vmCount = [int]$Matches[1]
            }
            
            $infrastructure.HyperVHosts += @{
                Name = $server.Hostname
                VMCount = $vmCount
                VeeamStatus = $server.VeeamStatus
                LastContact = $server.LastContact
                WindowsUpdateStatus = $server.WindowsUpdateStatus
            }
        }
        
        # Identifier les serveurs Veeam
        if ($server.VeeamStatus -and $server.VeeamStatus -like "*Installed*") {
            $infrastructure.VeeamServers += $server.Hostname
        }
        
        # TODO: D√©terminer quels serveurs sont des VMs (n√©cessite enrichissement des donn√©es)
    }
    
    return $infrastructure
}

# Fonction pour analyser les d√©pendances
function Analyze-Dependencies {
    param($Infrastructure)
    
    Write-Host "`nüîç ANALYSE DES D√âPENDANCES" -ForegroundColor Green
    Write-Host "-" * 40
    
    # H√¥tes Hyper-V
    Write-Host "`nüìå H√¥tes Hyper-V d√©tect√©s:" -ForegroundColor Cyan
    foreach ($host in $Infrastructure.HyperVHosts) {
        Write-Host "  ‚Ä¢ $($host.Name) - $($host.VMCount) VMs" -ForegroundColor White
        if ($host.VeeamStatus) {
            Write-Host "    ‚îî‚îÄ Veeam: $($host.VeeamStatus)" -ForegroundColor Gray
        }
    }
    
    # Serveurs Veeam
    Write-Host "`nüìå Serveurs Veeam:" -ForegroundColor Cyan
    foreach ($veeam in $Infrastructure.VeeamServers) {
        Write-Host "  ‚Ä¢ $veeam" -ForegroundColor White
    }
    
    # R√®gles d'orchestration
    Write-Host "`n‚öôÔ∏è R√àGLES D'ORCHESTRATION" -ForegroundColor Yellow
    Write-Host "1. Les VMs doivent √™tre mises √† jour AVANT leur h√¥te Hyper-V"
    Write-Host "2. Les sauvegardes Veeam doivent √™tre suspendues pendant les updates"
    Write-Host "3. Un seul h√¥te Hyper-V √† la fois pour maintenir la disponibilit√©"
    Write-Host "4. Attendre que les VMs red√©marrent apr√®s reboot de l'h√¥te"
    
    return @{
        Rules = @(
            "VMs before Hosts"
            "Pause Veeam during updates"
            "One Hyper-V host at a time"
            "Wait for VM recovery after host reboot"
        )
        Dependencies = $Infrastructure
    }
}

# Fonction pour cr√©er un plan d'orchestration
function Create-UpdatePlan {
    param($Infrastructure)
    
    Write-Host "`nüìù CR√âATION DU PLAN D'ORCHESTRATION" -ForegroundColor Green
    Write-Host "-" * 40
    
    $plan = @{
        Phases = @()
        EstimatedDuration = 0
    }
    
    # Phase 1: Pr√©parer Veeam
    $plan.Phases += @{
        Order = 1
        Name = "Suspension Veeam"
        Actions = @(
            "Suspendre tous les jobs Veeam"
            "Attendre fin des jobs en cours"
        )
        Duration = 15
        Servers = $Infrastructure.VeeamServers
    }
    
    # Phase 2: Update des VMs (si identifi√©es)
    $plan.Phases += @{
        Order = 2
        Name = "Update VMs"
        Actions = @(
            "Windows Update sur toutes les VMs"
            "Reboot si n√©cessaire"
            "V√©rifier disponibilit√©"
        )
        Duration = 60
        Servers = @() # TODO: Lister les VMs
    }
    
    # Phase 3: Update des h√¥tes Hyper-V (un par un)
    $hostOrder = 1
    foreach ($hvHost in $Infrastructure.HyperVHosts) {
        $plan.Phases += @{
            Order = 2 + $hostOrder
            Name = "Update H√¥te $($hvHost.Name)"
            Actions = @(
                "Migrer VMs critiques si possible"
                "Windows Update sur $($hvHost.Name)"
                "Reboot $($hvHost.Name)"
                "Attendre red√©marrage des VMs"
                "V√©rifier sant√© des VMs"
            )
            Duration = 45
            Servers = @($hvHost.Name)
        }
        $hostOrder++
    }
    
    # Phase finale: R√©activer Veeam
    $plan.Phases += @{
        Order = 99
        Name = "R√©activation Veeam"
        Actions = @(
            "R√©activer tous les jobs Veeam"
            "Lancer backup de v√©rification"
        )
        Duration = 10
        Servers = $Infrastructure.VeeamServers
    }
    
    # Calculer dur√©e totale
    $plan.EstimatedDuration = ($plan.Phases | Measure-Object -Property Duration -Sum).Sum
    
    # Afficher le plan
    Write-Host "`nüìã PLAN D'ORCHESTRATION G√âN√âR√â:" -ForegroundColor Cyan
    foreach ($phase in $plan.Phases | Sort-Object Order) {
        Write-Host "`nüîπ Phase $($phase.Order): $($phase.Name)" -ForegroundColor Yellow
        Write-Host "   Dur√©e estim√©e: $($phase.Duration) minutes" -ForegroundColor Gray
        Write-Host "   Serveurs: $($phase.Servers -join ', ')" -ForegroundColor Gray
        Write-Host "   Actions:" -ForegroundColor Gray
        foreach ($action in $phase.Actions) {
            Write-Host "     ‚Ä¢ $action" -ForegroundColor White
        }
    }
    
    Write-Host "`n‚è±Ô∏è DUR√âE TOTALE ESTIM√âE: $($plan.EstimatedDuration) minutes" -ForegroundColor Green
    
    return $plan
}

# Fonction pour suspendre Veeam
function Suspend-VeeamJobs {
    Write-Host "`n‚è∏Ô∏è SUSPENSION DES JOBS VEEAM" -ForegroundColor Yellow
    
    try {
        # Charger le module Veeam si disponible
        if (Get-Module -ListAvailable -Name Veeam.Backup.PowerShell) {
            Import-Module Veeam.Backup.PowerShell
            
            # Obtenir tous les jobs
            $jobs = Get-VBRJob
            
            foreach ($job in $jobs) {
                if ($job.IsScheduleEnabled) {
                    Write-Host "  Suspension: $($job.Name)" -ForegroundColor Gray
                    Disable-VBRJob -Job $job
                }
            }
            
            # Attendre fin des jobs en cours
            $runningJobs = Get-VBRJob | Where-Object {$_.GetLastState() -eq "Working"}
            if ($runningJobs) {
                Write-Host "  ‚è≥ Attente fin des jobs en cours..." -ForegroundColor Yellow
                while ($runningJobs) {
                    Start-Sleep -Seconds 30
                    $runningJobs = Get-VBRJob | Where-Object {$_.GetLastState() -eq "Working"}
                }
            }
            
            Write-Host "  ‚úÖ Tous les jobs Veeam sont suspendus" -ForegroundColor Green
            return $true
        }
        else {
            Write-Host "  ‚ö†Ô∏è Module Veeam non disponible sur ce serveur" -ForegroundColor Yellow
            return $false
        }
    }
    catch {
        Write-Host "  ‚ùå Erreur suspension Veeam: $_" -ForegroundColor Red
        return $false
    }
}

# Fonction pour r√©activer Veeam
function Resume-VeeamJobs {
    Write-Host "`n‚ñ∂Ô∏è R√âACTIVATION DES JOBS VEEAM" -ForegroundColor Yellow
    
    try {
        if (Get-Module -ListAvailable -Name Veeam.Backup.PowerShell) {
            Import-Module Veeam.Backup.PowerShell
            
            $jobs = Get-VBRJob
            foreach ($job in $jobs) {
                Write-Host "  R√©activation: $($job.Name)" -ForegroundColor Gray
                Enable-VBRJob -Job $job
            }
            
            Write-Host "  ‚úÖ Tous les jobs Veeam sont r√©activ√©s" -ForegroundColor Green
            return $true
        }
        else {
            Write-Host "  ‚ö†Ô∏è Module Veeam non disponible" -ForegroundColor Yellow
            return $false
        }
    }
    catch {
        Write-Host "  ‚ùå Erreur r√©activation Veeam: $_" -ForegroundColor Red
        return $false
    }
}

# Fonction pour ex√©cuter Windows Update
function Execute-WindowsUpdate {
    param([string]$ServerName)
    
    Write-Host "`nüîÑ WINDOWS UPDATE sur $ServerName" -ForegroundColor Cyan
    
    if ($ServerName -eq $env:COMPUTERNAME) {
        # Ex√©cution locale
        try {
            # Installer le module PSWindowsUpdate si n√©cessaire
            if (!(Get-Module -ListAvailable -Name PSWindowsUpdate)) {
                Write-Host "  Installation module PSWindowsUpdate..." -ForegroundColor Gray
                Install-Module -Name PSWindowsUpdate -Force -Scope CurrentUser
            }
            
            Import-Module PSWindowsUpdate
            
            # Rechercher les mises √† jour
            Write-Host "  üîç Recherche des mises √† jour..." -ForegroundColor Yellow
            $updates = Get-WindowsUpdate
            
            if ($updates) {
                Write-Host "  üì¶ $($updates.Count) mises √† jour trouv√©es" -ForegroundColor Cyan
                
                # Installer les mises √† jour
                Write-Host "  ‚¨áÔ∏è Installation en cours..." -ForegroundColor Yellow
                Install-WindowsUpdate -AcceptAll -AutoReboot:$false
                
                # V√©rifier si reboot n√©cessaire
                if (Get-WURebootStatus -Silent) {
                    Write-Host "  üîÑ Red√©marrage n√©cessaire" -ForegroundColor Yellow
                    return @{
                        Success = $true
                        RebootRequired = $true
                        UpdateCount = $updates.Count
                    }
                }
                else {
                    Write-Host "  ‚úÖ Mises √† jour install√©es" -ForegroundColor Green
                    return @{
                        Success = $true
                        RebootRequired = $false
                        UpdateCount = $updates.Count
                    }
                }
            }
            else {
                Write-Host "  ‚úÖ Syst√®me d√©j√† √† jour" -ForegroundColor Green
                return @{
                    Success = $true
                    RebootRequired = $false
                    UpdateCount = 0
                }
            }
        }
        catch {
            Write-Host "  ‚ùå Erreur: $_" -ForegroundColor Red
            return @{
                Success = $false
                Error = $_.ToString()
            }
        }
    }
    else {
        # Ex√©cution distante
        Write-Host "  üîó Connexion distante √† $ServerName..." -ForegroundColor Gray
        # TODO: Impl√©menter l'ex√©cution distante via Invoke-Command
    }
}

# Programme principal
switch ($Action) {
    "Analyze" {
        $infrastructure = Get-Infrastructure
        $dependencies = Analyze-Dependencies -Infrastructure $infrastructure
        
        # Sauvegarder l'analyse dans SharePoint
        Write-Host "`nüíæ Sauvegarde de l'analyse dans SharePoint..." -ForegroundColor Gray
    }
    
    "Plan" {
        $infrastructure = Get-Infrastructure
        $plan = Create-UpdatePlan -Infrastructure $infrastructure
        
        Write-Host "`nüéØ PROCHAINES √âTAPES:" -ForegroundColor Green
        Write-Host "1. V√©rifier le plan ci-dessus"
        Write-Host "2. Ex√©cuter: .\WINDOWS-UPDATE-ORCHESTRATOR.ps1 -Action Execute"
        Write-Host "3. Surveiller: .\WINDOWS-UPDATE-ORCHESTRATOR.ps1 -Action Status"
    }
    
    "Execute" {
        Write-Host "‚ö†Ô∏è D√âBUT DE L'ORCHESTRATION" -ForegroundColor Yellow
        Write-Host "Cette op√©ration va:"
        Write-Host "  ‚Ä¢ Suspendre les sauvegardes Veeam"
        Write-Host "  ‚Ä¢ Installer les Windows Updates"
        Write-Host "  ‚Ä¢ Red√©marrer les serveurs si n√©cessaire"
        Write-Host "  ‚Ä¢ R√©activer les sauvegardes"
        
        $confirm = Read-Host "`nConfirmer l'ex√©cution? (O/N)"
        if ($confirm -eq "O") {
            # TODO: Impl√©menter l'ex√©cution compl√®te
            Write-Host "üöÄ Ex√©cution en cours..." -ForegroundColor Green
        }
        else {
            Write-Host "‚ùå Ex√©cution annul√©e" -ForegroundColor Red
        }
    }
    
    "Status" {
        Write-Host "üìä STATUT DE L'ORCHESTRATION" -ForegroundColor Cyan
        # TODO: R√©cup√©rer et afficher le statut depuis SharePoint
    }
    
    default {
        Write-Host "‚ùå Action non reconnue: $Action" -ForegroundColor Red
        Write-Host "Actions disponibles: Analyze | Plan | Execute | Status"
    }
}

Write-Host "`n‚úÖ Orchestrator termin√©" -ForegroundColor Green