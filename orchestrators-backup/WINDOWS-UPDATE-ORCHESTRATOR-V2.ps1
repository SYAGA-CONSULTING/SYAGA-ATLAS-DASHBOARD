# WINDOWS UPDATE ORCHESTRATOR v2.0
# Gestion compl√®te: Windows Update, Hyper-V, R√©plication, Veeam

param(
    [Parameter(Mandatory=$false)]
    [string]$Action = "Analyze",  # Analyze | Plan | Execute | Status | Test
    [string]$TargetServer = $env:COMPUTERNAME,
    [switch]$Force,
    [switch]$SkipVeeam,
    [switch]$SkipReplication
)

$VERSION = "v2.0"
Write-Host "üéØ WINDOWS UPDATE ORCHESTRATOR $VERSION" -ForegroundColor Cyan
Write-Host "=" * 60

# Configuration
$SharePointConfig = @{
    TenantId = "6027d81c-ad9b-48f5-9da6-96f1bad11429"
    ClientId = "f66a8c6c-1037-41b8-be3c-4f6e67c1f49e"
    ClientSecret = "[REDACTED]"  # Remplacer par le vrai secret
    SiteId = "syagacons.sharepoint.com,4cce268e-9cb7-4829-8c1c-3c85faa1810d,8cb3611e-c4aa-4105-b55d-2247e4fac8c8"
    ListId = "94dc7ad4-740f-4c1f-b99c-107e01c8f70b"
}

# ================================================================================
# SECTION 1: FONCTIONS HYPER-V & R√âPLICATION
# ================================================================================

function Get-HyperVReplicationStatus {
    Write-Host "`nüîÑ ANALYSE R√âPLICATION HYPER-V" -ForegroundColor Cyan
    
    $replicationStatus = @{
        Healthy = @()
        Warning = @()
        Critical = @()
        Suspended = @()
        Total = 0
    }
    
    try {
        # Obtenir toutes les VMs avec r√©plication
        $replicatedVMs = Get-VMReplication -ErrorAction SilentlyContinue
        
        if ($replicatedVMs) {
            $replicationStatus.Total = $replicatedVMs.Count
            
            foreach ($vm in $replicatedVMs) {
                $vmInfo = @{
                    Name = $vm.Name
                    State = $vm.State
                    Health = $vm.Health
                    Mode = $vm.Mode
                    PrimaryServer = $vm.PrimaryServer
                    ReplicaServer = $vm.ReplicaServer
                    LastReplicationTime = $vm.LastReplicationTime
                    ReplicationFrequency = $vm.ReplicationFrequencySec
                }
                
                switch ($vm.Health) {
                    "Normal" { $replicationStatus.Healthy += $vmInfo }
                    "Warning" { $replicationStatus.Warning += $vmInfo }
                    "Critical" { $replicationStatus.Critical += $vmInfo }
                }
                
                if ($vm.State -eq "Suspended") {
                    $replicationStatus.Suspended += $vmInfo
                }
            }
            
            # Afficher r√©sum√©
            Write-Host "  üìä R√©sum√© r√©plication:" -ForegroundColor Yellow
            Write-Host "    ‚Ä¢ Total VMs r√©pliqu√©es: $($replicationStatus.Total)" -ForegroundColor White
            Write-Host "    ‚Ä¢ √âtat Normal: $($replicationStatus.Healthy.Count)" -ForegroundColor Green
            Write-Host "    ‚Ä¢ Avertissements: $($replicationStatus.Warning.Count)" -ForegroundColor Yellow
            Write-Host "    ‚Ä¢ Critiques: $($replicationStatus.Critical.Count)" -ForegroundColor Red
            Write-Host "    ‚Ä¢ Suspendues: $($replicationStatus.Suspended.Count)" -ForegroundColor Gray
            
            # D√©tails des VMs probl√©matiques
            if ($replicationStatus.Critical.Count -gt 0) {
                Write-Host "`n  ‚ö†Ô∏è VMs en √©tat CRITIQUE:" -ForegroundColor Red
                foreach ($vm in $replicationStatus.Critical) {
                    Write-Host "    ‚Ä¢ $($vm.Name) - Derni√®re r√©plication: $($vm.LastReplicationTime)" -ForegroundColor Red
                }
            }
            
            if ($replicationStatus.Warning.Count -gt 0) {
                Write-Host "`n  ‚ö†Ô∏è VMs avec avertissements:" -ForegroundColor Yellow
                foreach ($vm in $replicationStatus.Warning) {
                    Write-Host "    ‚Ä¢ $($vm.Name)" -ForegroundColor Yellow
                }
            }
        }
        else {
            Write-Host "  ‚ÑπÔ∏è Aucune VM avec r√©plication configur√©e" -ForegroundColor Gray
        }
    }
    catch {
        Write-Host "  ‚ùå Erreur analyse r√©plication: $_" -ForegroundColor Red
    }
    
    return $replicationStatus
}

function Suspend-HyperVReplication {
    param(
        [string[]]$VMNames = @(),
        [switch]$All
    )
    
    Write-Host "`n‚è∏Ô∏è SUSPENSION R√âPLICATION HYPER-V" -ForegroundColor Yellow
    
    $results = @{
        Success = @()
        Failed = @()
    }
    
    try {
        if ($All) {
            $vmsToSuspend = Get-VMReplication | Where-Object {$_.State -ne "Suspended"}
        }
        elseif ($VMNames.Count -gt 0) {
            $vmsToSuspend = Get-VMReplication | Where-Object {$_.Name -in $VMNames -and $_.State -ne "Suspended"}
        }
        else {
            Write-Host "  ‚ö†Ô∏è Aucune VM sp√©cifi√©e" -ForegroundColor Yellow
            return $results
        }
        
        foreach ($vm in $vmsToSuspend) {
            try {
                Write-Host "  Suspension r√©plication: $($vm.Name)..." -ForegroundColor Gray -NoNewline
                Suspend-VMReplication -VMName $vm.Name -Confirm:$false
                $results.Success += $vm.Name
                Write-Host " ‚úÖ" -ForegroundColor Green
            }
            catch {
                $results.Failed += @{VM = $vm.Name; Error = $_.ToString()}
                Write-Host " ‚ùå" -ForegroundColor Red
            }
        }
        
        Write-Host "`n  üìä R√©sultat suspension:" -ForegroundColor Cyan
        Write-Host "    ‚Ä¢ R√©ussies: $($results.Success.Count)" -ForegroundColor Green
        Write-Host "    ‚Ä¢ √âchou√©es: $($results.Failed.Count)" -ForegroundColor Red
    }
    catch {
        Write-Host "  ‚ùå Erreur globale: $_" -ForegroundColor Red
    }
    
    return $results
}

function Resume-HyperVReplication {
    param(
        [string[]]$VMNames = @(),
        [switch]$All
    )
    
    Write-Host "`n‚ñ∂Ô∏è REPRISE R√âPLICATION HYPER-V" -ForegroundColor Yellow
    
    $results = @{
        Success = @()
        Failed = @()
        Resync = @()
    }
    
    try {
        if ($All) {
            $vmsToResume = Get-VMReplication | Where-Object {$_.State -eq "Suspended"}
        }
        elseif ($VMNames.Count -gt 0) {
            $vmsToResume = Get-VMReplication | Where-Object {$_.Name -in $VMNames -and $_.State -eq "Suspended"}
        }
        else {
            Write-Host "  ‚ö†Ô∏è Aucune VM sp√©cifi√©e" -ForegroundColor Yellow
            return $results
        }
        
        foreach ($vm in $vmsToResume) {
            try {
                Write-Host "  Reprise r√©plication: $($vm.Name)..." -ForegroundColor Gray -NoNewline
                Resume-VMReplication -VMName $vm.Name -Confirm:$false
                
                # V√©rifier si resync n√©cessaire
                Start-Sleep -Seconds 2
                $vmState = Get-VMReplication -VMName $vm.Name
                
                if ($vmState.Health -eq "Critical") {
                    Write-Host " ‚ö†Ô∏è Resync n√©cessaire" -ForegroundColor Yellow
                    $results.Resync += $vm.Name
                    
                    # Tenter resync automatique
                    if ($Force) {
                        Write-Host "    Resynchronisation en cours..." -ForegroundColor Gray
                        Resume-VMReplication -VMName $vm.Name -Resynchronize -Confirm:$false
                    }
                }
                else {
                    Write-Host " ‚úÖ" -ForegroundColor Green
                }
                
                $results.Success += $vm.Name
            }
            catch {
                $results.Failed += @{VM = $vm.Name; Error = $_.ToString()}
                Write-Host " ‚ùå" -ForegroundColor Red
            }
        }
        
        Write-Host "`n  üìä R√©sultat reprise:" -ForegroundColor Cyan
        Write-Host "    ‚Ä¢ Reprises: $($results.Success.Count)" -ForegroundColor Green
        Write-Host "    ‚Ä¢ Resync n√©cessaire: $($results.Resync.Count)" -ForegroundColor Yellow
        Write-Host "    ‚Ä¢ √âchou√©es: $($results.Failed.Count)" -ForegroundColor Red
    }
    catch {
        Write-Host "  ‚ùå Erreur globale: $_" -ForegroundColor Red
    }
    
    return $results
}

function Repair-HyperVReplication {
    param(
        [string]$VMName,
        [switch]$AutoFix
    )
    
    Write-Host "`nüîß R√âPARATION R√âPLICATION - $VMName" -ForegroundColor Cyan
    
    try {
        $vm = Get-VMReplication -VMName $VMName
        
        if (!$vm) {
            Write-Host "  ‚ùå VM non trouv√©e ou pas de r√©plication" -ForegroundColor Red
            return $false
        }
        
        Write-Host "  √âtat actuel: $($vm.State) - Sant√©: $($vm.Health)" -ForegroundColor Gray
        
        # Analyser le probl√®me
        switch ($vm.Health) {
            "Critical" {
                Write-Host "  üî¥ √âtat CRITIQUE d√©tect√©" -ForegroundColor Red
                
                if ($AutoFix -or $Force) {
                    # Tentative 1: Resynchronisation
                    Write-Host "  Tentative 1: Resynchronisation..." -ForegroundColor Yellow
                    try {
                        Resume-VMReplication -VMName $VMName -Resynchronize -Confirm:$false
                        Start-Sleep -Seconds 10
                        
                        $vm = Get-VMReplication -VMName $VMName
                        if ($vm.Health -eq "Normal") {
                            Write-Host "  ‚úÖ R√©paration r√©ussie par resync" -ForegroundColor Green
                            return $true
                        }
                    }
                    catch {
                        Write-Host "  ‚ö†Ô∏è Resync √©chou√©: $_" -ForegroundColor Yellow
                    }
                    
                    # Tentative 2: Reset de la r√©plication
                    Write-Host "  Tentative 2: Reset complet..." -ForegroundColor Yellow
                    try {
                        # Supprimer la r√©plication
                        Remove-VMReplication -VMName $VMName -Confirm:$false
                        Start-Sleep -Seconds 5
                        
                        # Recr√©er la r√©plication
                        Write-Host "    Recr√©ation de la r√©plication..." -ForegroundColor Gray
                        # TODO: R√©cup√©rer les param√®tres originaux depuis SharePoint
                        
                        Write-Host "  ‚úÖ R√©plication recr√©√©e" -ForegroundColor Green
                        return $true
                    }
                    catch {
                        Write-Host "  ‚ùå Reset √©chou√©: $_" -ForegroundColor Red
                    }
                }
                else {
                    Write-Host "  ‚ÑπÔ∏è Actions possibles:" -ForegroundColor Cyan
                    Write-Host "    1. Resynchronisation manuelle"
                    Write-Host "    2. Suppression et recr√©ation de la r√©plication"
                    Write-Host "    3. V√©rification de la connectivit√© r√©seau"
                    Write-Host "  Utiliser -AutoFix pour r√©parer automatiquement"
                }
            }
            
            "Warning" {
                Write-Host "  üü° Avertissement d√©tect√©" -ForegroundColor Yellow
                Write-Host "  V√©rification en cours..." -ForegroundColor Gray
                
                # V√©rifier la latence
                $lastRepl = $vm.LastReplicationTime
                $timeDiff = (Get-Date) - $lastRepl
                
                if ($timeDiff.TotalMinutes -gt 15) {
                    Write-Host "  ‚ö†Ô∏è R√©plication en retard de $([int]$timeDiff.TotalMinutes) minutes" -ForegroundColor Yellow
                    
                    if ($AutoFix) {
                        Write-Host "  For√ßage d'une r√©plication..." -ForegroundColor Gray
                        Start-VMReplication -VMName $VMName
                    }
                }
            }
            
            "Normal" {
                Write-Host "  ‚úÖ R√©plication saine" -ForegroundColor Green
                return $true
            }
        }
    }
    catch {
        Write-Host "  ‚ùå Erreur r√©paration: $_" -ForegroundColor Red
        return $false
    }
}

# ================================================================================
# SECTION 2: FONCTIONS VEEAM
# ================================================================================

function Get-VeeamStatus {
    Write-Host "`nüíæ ANALYSE VEEAM BACKUP" -ForegroundColor Cyan
    
    $veeamStatus = @{
        Installed = $false
        Jobs = @()
        RunningJobs = @()
        ScheduledJobs = @()
        LastBackups = @()
    }
    
    try {
        # V√©rifier installation Veeam
        $veeamService = Get-Service -Name "Veeam*" -ErrorAction SilentlyContinue
        
        if ($veeamService) {
            $veeamStatus.Installed = $true
            Write-Host "  ‚úÖ Veeam install√©" -ForegroundColor Green
            
            # Charger module PowerShell si disponible
            if (Get-Module -ListAvailable -Name Veeam.Backup.PowerShell) {
                Import-Module Veeam.Backup.PowerShell
                
                # Obtenir tous les jobs
                $jobs = Get-VBRJob
                $veeamStatus.Jobs = $jobs
                
                Write-Host "  üìä Jobs d√©tect√©s: $($jobs.Count)" -ForegroundColor Yellow
                
                foreach ($job in $jobs) {
                    $jobInfo = @{
                        Name = $job.Name
                        Type = $job.JobType
                        Enabled = $job.IsScheduleEnabled
                        LastRun = $job.FindLastSession().EndTime
                        LastResult = $job.FindLastSession().Result
                        State = $job.GetLastState()
                    }
                    
                    # Jobs en cours
                    if ($jobInfo.State -eq "Working") {
                        $veeamStatus.RunningJobs += $jobInfo
                        Write-Host "    üîÑ En cours: $($jobInfo.Name)" -ForegroundColor Cyan
                    }
                    
                    # Jobs planifi√©s
                    if ($jobInfo.Enabled) {
                        $veeamStatus.ScheduledJobs += $jobInfo
                    }
                    
                    # Derniers backups
                    $veeamStatus.LastBackups += $jobInfo
                    
                    # Afficher status
                    $statusColor = switch ($jobInfo.LastResult) {
                        "Success" { "Green" }
                        "Warning" { "Yellow" }
                        "Failed" { "Red" }
                        default { "Gray" }
                    }
                    
                    Write-Host "    ‚Ä¢ $($jobInfo.Name): $($jobInfo.LastResult)" -ForegroundColor $statusColor
                }
                
                Write-Host "`n  üìà R√©sum√©:" -ForegroundColor Cyan
                Write-Host "    ‚Ä¢ Jobs actifs: $($veeamStatus.ScheduledJobs.Count)" -ForegroundColor Green
                Write-Host "    ‚Ä¢ En cours: $($veeamStatus.RunningJobs.Count)" -ForegroundColor Yellow
            }
            else {
                Write-Host "  ‚ö†Ô∏è Module PowerShell Veeam non disponible" -ForegroundColor Yellow
                Write-Host "  Utilisation de m√©thodes alternatives..." -ForegroundColor Gray
                
                # M√©thode alternative via WMI/Registry
                $veeamStatus.Installed = $true
                $veeamStatus.Jobs = @("D√©tection limit√©e sans module")
            }
        }
        else {
            Write-Host "  ‚ÑπÔ∏è Veeam non install√© sur ce serveur" -ForegroundColor Gray
        }
    }
    catch {
        Write-Host "  ‚ùå Erreur analyse Veeam: $_" -ForegroundColor Red
    }
    
    return $veeamStatus
}

function Suspend-VeeamJobs {
    param(
        [string[]]$JobNames = @(),
        [switch]$All,
        [int]$WaitForRunning = 300  # Attendre max 5 minutes
    )
    
    Write-Host "`n‚è∏Ô∏è SUSPENSION JOBS VEEAM" -ForegroundColor Yellow
    
    $results = @{
        Suspended = @()
        Failed = @()
        WaitedFor = @()
    }
    
    try {
        if (Get-Module -ListAvailable -Name Veeam.Backup.PowerShell) {
            Import-Module Veeam.Backup.PowerShell
            
            # S√©lectionner les jobs
            if ($All) {
                $jobsToSuspend = Get-VBRJob | Where-Object {$_.IsScheduleEnabled}
            }
            elseif ($JobNames.Count -gt 0) {
                $jobsToSuspend = Get-VBRJob | Where-Object {$_.Name -in $JobNames -and $_.IsScheduleEnabled}
            }
            else {
                $jobsToSuspend = Get-VBRJob | Where-Object {$_.IsScheduleEnabled}
            }
            
            # Suspendre les jobs
            foreach ($job in $jobsToSuspend) {
                try {
                    Write-Host "  Suspension: $($job.Name)..." -ForegroundColor Gray -NoNewline
                    Disable-VBRJob -Job $job
                    $results.Suspended += $job.Name
                    Write-Host " ‚úÖ" -ForegroundColor Green
                }
                catch {
                    $results.Failed += @{Job = $job.Name; Error = $_.ToString()}
                    Write-Host " ‚ùå" -ForegroundColor Red
                }
            }
            
            # Attendre fin des jobs en cours
            $runningJobs = Get-VBRJob | Where-Object {$_.GetLastState() -eq "Working"}
            if ($runningJobs.Count -gt 0) {
                Write-Host "`n  ‚è≥ Attente fin des jobs en cours..." -ForegroundColor Yellow
                $waited = 0
                
                while ($runningJobs.Count -gt 0 -and $waited -lt $WaitForRunning) {
                    Write-Host "    Jobs en cours: $($runningJobs.Count) - Attente: $waited sec" -ForegroundColor Gray
                    Start-Sleep -Seconds 30
                    $waited += 30
                    $runningJobs = Get-VBRJob | Where-Object {$_.GetLastState() -eq "Working"}
                    $results.WaitedFor = $runningJobs | ForEach-Object {$_.Name}
                }
                
                if ($runningJobs.Count -eq 0) {
                    Write-Host "  ‚úÖ Tous les jobs sont arr√™t√©s" -ForegroundColor Green
                }
                else {
                    Write-Host "  ‚ö†Ô∏è $($runningJobs.Count) jobs toujours en cours apr√®s $WaitForRunning secondes" -ForegroundColor Yellow
                }
            }
            
            Write-Host "`n  üìä R√©sultat suspension Veeam:" -ForegroundColor Cyan
            Write-Host "    ‚Ä¢ Suspendus: $($results.Suspended.Count)" -ForegroundColor Green
            Write-Host "    ‚Ä¢ √âchou√©s: $($results.Failed.Count)" -ForegroundColor Red
        }
        else {
            Write-Host "  ‚ö†Ô∏è Module Veeam non disponible" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "  ‚ùå Erreur suspension Veeam: $_" -ForegroundColor Red
    }
    
    return $results
}

function Resume-VeeamJobs {
    param(
        [string[]]$JobNames = @(),
        [switch]$All,
        [switch]$RunTestBackup
    )
    
    Write-Host "`n‚ñ∂Ô∏è R√âACTIVATION JOBS VEEAM" -ForegroundColor Yellow
    
    $results = @{
        Resumed = @()
        Failed = @()
        TestStarted = @()
    }
    
    try {
        if (Get-Module -ListAvailable -Name Veeam.Backup.PowerShell) {
            Import-Module Veeam.Backup.PowerShell
            
            # S√©lectionner les jobs
            if ($All) {
                $jobsToResume = Get-VBRJob
            }
            elseif ($JobNames.Count -gt 0) {
                $jobsToResume = Get-VBRJob | Where-Object {$_.Name -in $JobNames}
            }
            else {
                $jobsToResume = Get-VBRJob
            }
            
            # R√©activer les jobs
            foreach ($job in $jobsToResume) {
                try {
                    Write-Host "  R√©activation: $($job.Name)..." -ForegroundColor Gray -NoNewline
                    Enable-VBRJob -Job $job
                    $results.Resumed += $job.Name
                    Write-Host " ‚úÖ" -ForegroundColor Green
                    
                    # Lancer un test si demand√©
                    if ($RunTestBackup) {
                        Write-Host "    Lancement backup test..." -ForegroundColor Gray
                        Start-VBRJob -Job $job -RunAsync
                        $results.TestStarted += $job.Name
                    }
                }
                catch {
                    $results.Failed += @{Job = $job.Name; Error = $_.ToString()}
                    Write-Host " ‚ùå" -ForegroundColor Red
                }
            }
            
            Write-Host "`n  üìä R√©sultat r√©activation Veeam:" -ForegroundColor Cyan
            Write-Host "    ‚Ä¢ R√©activ√©s: $($results.Resumed.Count)" -ForegroundColor Green
            Write-Host "    ‚Ä¢ Tests lanc√©s: $($results.TestStarted.Count)" -ForegroundColor Cyan
            Write-Host "    ‚Ä¢ √âchou√©s: $($results.Failed.Count)" -ForegroundColor Red
        }
        else {
            Write-Host "  ‚ö†Ô∏è Module Veeam non disponible" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "  ‚ùå Erreur r√©activation Veeam: $_" -ForegroundColor Red
    }
    
    return $results
}

# ================================================================================
# SECTION 3: ORCHESTRATION PRINCIPALE
# ================================================================================

function Create-OrchestrationPlan {
    param(
        [hashtable]$Infrastructure
    )
    
    Write-Host "`nüìã CR√âATION PLAN D'ORCHESTRATION COMPLET" -ForegroundColor Green
    Write-Host "=" * 50
    
    $plan = @{
        Version = "2.0"
        Created = Get-Date
        Phases = @()
        PreChecks = @()
        PostChecks = @()
        RollbackPlan = @()
        EstimatedDuration = 0
    }
    
    # PRE-CHECKS
    $plan.PreChecks = @(
        "V√©rifier espace disque (min 10GB)"
        "V√©rifier connectivit√© r√©seau"
        "V√©rifier √©tat r√©plication Hyper-V"
        "V√©rifier √©tat jobs Veeam"
        "Cr√©er point de restauration syst√®me"
    )
    
    # PHASE 1: Pr√©paration
    $plan.Phases += @{
        Order = 1
        Name = "üìç PHASE 1: PR√âPARATION"
        Critical = $true
        Actions = @(
            @{
                Name = "Analyse infrastructure"
                Command = "Get-HyperVReplicationStatus"
                Duration = 5
            },
            @{
                Name = "Suspension jobs Veeam"
                Command = "Suspend-VeeamJobs -All"
                Duration = 10
                Rollback = "Resume-VeeamJobs -All"
            },
            @{
                Name = "Suspension r√©plication Hyper-V"
                Command = "Suspend-HyperVReplication -All"
                Duration = 5
                Rollback = "Resume-HyperVReplication -All"
            },
            @{
                Name = "Cr√©ation snapshot VMs critiques"
                Command = "Checkpoint-VM -Name * -SnapshotName 'Pre-WindowsUpdate'"
                Duration = 15
            }
        )
    }
    
    # PHASE 2: Update VMs (Tier 2)
    $plan.Phases += @{
        Order = 2
        Name = "üìç PHASE 2: UPDATE VMs NON-CRITIQUES"
        Critical = $false
        Parallel = $true
        Actions = @(
            @{
                Name = "Windows Update VMs Tier 2"
                Targets = @() # √Ä remplir avec les VMs non-critiques
                Command = "Execute-WindowsUpdate"
                Duration = 45
                MaxParallel = 3
            }
        )
    }
    
    # PHASE 3: Update VMs critiques (une par une)
    $plan.Phases += @{
        Order = 3
        Name = "üìç PHASE 3: UPDATE VMs CRITIQUES"
        Critical = $true
        Parallel = $false
        Actions = @(
            @{
                Name = "Windows Update DC primaire"
                Target = "SYAGA-DC01"
                Command = "Execute-WindowsUpdate"
                Duration = 30
                WaitAfter = 10
            },
            @{
                Name = "Windows Update DC secondaire"
                Target = "SYAGA-DC02"
                Command = "Execute-WindowsUpdate"
                Duration = 30
                WaitAfter = 10
            }
        )
    }
    
    # PHASE 4: Update H√¥tes Hyper-V (un par un)
    $hostCount = 0
    foreach ($host in $Infrastructure.HyperVHosts) {
        $hostCount++
        $plan.Phases += @{
            Order = 4 + $hostCount
            Name = "üìç PHASE $(3 + $hostCount): UPDATE H√îTE $($host.Name)"
            Critical = $true
            Actions = @(
                @{
                    Name = "V√©rification VMs avant update"
                    Command = "Get-VM -ComputerName $($host.Name) | Where State -eq Running"
                    Duration = 2
                },
                @{
                    Name = "Migration VMs si cluster"
                    Command = "Move-ClusterVirtualMachineRole"
                    Duration = 20
                    SkipIfNoCluster = $true
                },
                @{
                    Name = "Windows Update h√¥te"
                    Target = $host.Name
                    Command = "Execute-WindowsUpdate"
                    Duration = 45
                },
                @{
                    Name = "Reboot si n√©cessaire"
                    Command = "Restart-Computer -Force -Wait"
                    Duration = 10
                },
                @{
                    Name = "Attente red√©marrage VMs"
                    Command = "Wait-VMRestart"
                    Duration = 15
                },
                @{
                    Name = "V√©rification sant√© VMs"
                    Command = "Test-VMHealth"
                    Duration = 5
                }
            )
        }
    }
    
    # PHASE FINALE: Restauration services
    $plan.Phases += @{
        Order = 99
        Name = "üìç PHASE FINALE: RESTAURATION SERVICES"
        Critical = $true
        Actions = @(
            @{
                Name = "Reprise r√©plication Hyper-V"
                Command = "Resume-HyperVReplication -All"
                Duration = 10
            },
            @{
                Name = "V√©rification/R√©paration r√©plications"
                Command = "Get-VMReplication | Where Health -ne Normal | Repair-HyperVReplication -AutoFix"
                Duration = 20
            },
            @{
                Name = "R√©activation jobs Veeam"
                Command = "Resume-VeeamJobs -All"
                Duration = 5
            },
            @{
                Name = "Lancement backup test"
                Command = "Start-VBRJob -Name 'Test-PostUpdate'"
                Duration = 30
            },
            @{
                Name = "Nettoyage snapshots temporaires"
                Command = "Remove-VMSnapshot -Name 'Pre-WindowsUpdate' -IncludeAllChildSnapshots"
                Duration = 10
                DelayHours = 24
            }
        )
    }
    
    # POST-CHECKS
    $plan.PostChecks = @(
        "V√©rifier tous les services critiques"
        "V√©rifier r√©plication Hyper-V (0 erreur)"
        "V√©rifier derniers backups Veeam"
        "V√©rifier logs d'√©v√©nements Windows"
        "Rapport final √† l'administrateur"
    )
    
    # ROLLBACK PLAN
    $plan.RollbackPlan = @(
        @{
            Trigger = "√âchec r√©plication apr√®s update"
            Actions = @(
                "Restore-VMSnapshot -Name 'Pre-WindowsUpdate'"
                "Resume-HyperVReplication -Resynchronize"
            )
        },
        @{
            Trigger = "VM critique ne d√©marre pas"
            Actions = @(
                "Restore-VMSnapshot -Name 'Pre-WindowsUpdate'"
                "Start-VM -Force"
            )
        },
        @{
            Trigger = "H√¥te Hyper-V ne red√©marre pas"
            Actions = @(
                "D√©marrage en mode sans √©chec"
                "D√©sinstallation derni√®res mises √† jour"
                "Restoration depuis backup Veeam si n√©cessaire"
            )
        }
    )
    
    # Calculer dur√©e totale
    foreach ($phase in $plan.Phases) {
        $phaseDuration = 0
        foreach ($action in $phase.Actions) {
            $phaseDuration += $action.Duration
        }
        $plan.EstimatedDuration += $phaseDuration
    }
    
    return $plan
}

function Display-OrchestrationPlan {
    param($Plan)
    
    Write-Host "`nüéØ PLAN D'ORCHESTRATION WINDOWS UPDATE + HYPER-V + VEEAM" -ForegroundColor Cyan
    Write-Host "=" * 60
    
    Write-Host "`nüìÖ Cr√©√© le: $($Plan.Created)" -ForegroundColor Gray
    Write-Host "‚è±Ô∏è Dur√©e estim√©e: $($Plan.EstimatedDuration) minutes" -ForegroundColor Yellow
    
    # PRE-CHECKS
    Write-Host "`n‚úÖ PRE-CHECKS:" -ForegroundColor Green
    foreach ($check in $Plan.PreChecks) {
        Write-Host "  ‚Ä¢ $check" -ForegroundColor White
    }
    
    # PHASES
    Write-Host "`nüìã PHASES D'EX√âCUTION:" -ForegroundColor Cyan
    foreach ($phase in $Plan.Phases | Sort-Object Order) {
        Write-Host "`n$($phase.Name)" -ForegroundColor Yellow
        
        if ($phase.Critical) {
            Write-Host "  ‚ö†Ô∏è PHASE CRITIQUE" -ForegroundColor Red
        }
        
        if ($phase.Parallel) {
            Write-Host "  ‚ö° Ex√©cution parall√®le possible" -ForegroundColor Cyan
        }
        
        foreach ($action in $phase.Actions) {
            Write-Host "  ‚è±Ô∏è [$($action.Duration)min] $($action.Name)" -ForegroundColor White
            
            if ($action.Target) {
                Write-Host "      Cible: $($action.Target)" -ForegroundColor Gray
            }
            
            if ($action.Rollback) {
                Write-Host "      ‚Ü©Ô∏è Rollback: $($action.Rollback)" -ForegroundColor DarkYellow
            }
        }
    }
    
    # POST-CHECKS
    Write-Host "`n‚úÖ POST-CHECKS:" -ForegroundColor Green
    foreach ($check in $Plan.PostChecks) {
        Write-Host "  ‚Ä¢ $check" -ForegroundColor White
    }
    
    # ROLLBACK
    Write-Host "`nüîÑ PLAN DE ROLLBACK:" -ForegroundColor Magenta
    foreach ($rollback in $Plan.RollbackPlan) {
        Write-Host "  Si: $($rollback.Trigger)" -ForegroundColor Yellow
        foreach ($action in $rollback.Actions) {
            Write-Host "    ‚Üí $action" -ForegroundColor White
        }
    }
    
    Write-Host "`n" + ("=" * 60) -ForegroundColor Cyan
    Write-Host "üí° RECOMMANDATIONS:" -ForegroundColor Yellow
    Write-Host "  1. Ex√©cuter pendant fen√™tre de maintenance"
    Write-Host "  2. Avoir un acc√®s iDRAC/iLO aux serveurs physiques"
    Write-Host "  3. V√©rifier les backups Veeam r√©cents avant de commencer"
    Write-Host "  4. Informer les utilisateurs de l'interruption de service"
    Write-Host "  5. Avoir le plan de rollback pr√™t"
}

# ================================================================================
# PROGRAMME PRINCIPAL
# ================================================================================

# Obtenir token pour SharePoint
function Get-GraphToken {
    $tokenUrl = "https://login.microsoftonline.com/$($SharePointConfig.TenantId)/oauth2/v2.0/token"
    $body = @{
        client_id = $SharePointConfig.ClientId
        client_secret = $SharePointConfig.ClientSecret
        scope = "https://graph.microsoft.com/.default"
        grant_type = "client_credentials"
    }
    return (Invoke-RestMethod -Uri $tokenUrl -Method Post -Body $body).access_token
}

# Obtenir infrastructure depuis SharePoint
function Get-Infrastructure {
    Write-Host "üìä R√©cup√©ration infrastructure depuis SharePoint..." -ForegroundColor Yellow
    
    $token = Get-GraphToken
    $headers = @{Authorization = "Bearer $token"}
    $listUrl = "https://graph.microsoft.com/v1.0/sites/$($SharePointConfig.SiteId)/lists/$($SharePointConfig.ListId)/items?`$expand=fields"
    
    $items = Invoke-RestMethod -Uri $listUrl -Headers $headers
    
    $infrastructure = @{
        HyperVHosts = @()
        VeeamServers = @()
        AllServers = @()
    }
    
    foreach ($item in $items.value) {
        $server = $item.fields
        $infrastructure.AllServers += $server
        
        if ($server.HyperVStatus -and $server.HyperVStatus -notlike "*NoHyperV*") {
            $infrastructure.HyperVHosts += $server
        }
        
        if ($server.VeeamStatus -and $server.VeeamStatus -like "*Installed*") {
            $infrastructure.VeeamServers += $server.Hostname
        }
    }
    
    return $infrastructure
}

# Ex√©cution selon action
switch ($Action) {
    "Analyze" {
        Write-Host "`nüîç ANALYSE COMPL√àTE DE L'INFRASTRUCTURE" -ForegroundColor Cyan
        
        $infrastructure = Get-Infrastructure
        
        # Analyser Hyper-V
        if ($infrastructure.HyperVHosts.Count -gt 0) {
            $replicationStatus = Get-HyperVReplicationStatus
        }
        
        # Analyser Veeam
        if ($infrastructure.VeeamServers.Count -gt 0) {
            $veeamStatus = Get-VeeamStatus
        }
        
        Write-Host "`nüìä R√âSUM√â INFRASTRUCTURE:" -ForegroundColor Green
        Write-Host "  ‚Ä¢ H√¥tes Hyper-V: $($infrastructure.HyperVHosts.Count)"
        Write-Host "  ‚Ä¢ Serveurs Veeam: $($infrastructure.VeeamServers.Count)"
        Write-Host "  ‚Ä¢ Total serveurs: $($infrastructure.AllServers.Count)"
    }
    
    "Plan" {
        $infrastructure = Get-Infrastructure
        $plan = Create-OrchestrationPlan -Infrastructure $infrastructure
        Display-OrchestrationPlan -Plan $plan
        
        # Sauvegarder le plan
        $planFile = "C:\temp\WindowsUpdate-Plan-$(Get-Date -Format 'yyyyMMdd-HHmmss').json"
        $plan | ConvertTo-Json -Depth 10 | Out-File $planFile
        Write-Host "`nüíæ Plan sauvegard√©: $planFile" -ForegroundColor Green
    }
    
    "Execute" {
        Write-Host "`n‚ö†Ô∏è EX√âCUTION DE L'ORCHESTRATION COMPL√àTE" -ForegroundColor Yellow
        Write-Host "Cette op√©ration va:" -ForegroundColor Yellow
        Write-Host "  ‚Ä¢ Suspendre la r√©plication Hyper-V" -ForegroundColor White
        Write-Host "  ‚Ä¢ Suspendre les sauvegardes Veeam" -ForegroundColor White
        Write-Host "  ‚Ä¢ Installer les Windows Updates sur tous les serveurs" -ForegroundColor White
        Write-Host "  ‚Ä¢ Red√©marrer les serveurs dans le bon ordre" -ForegroundColor White
        Write-Host "  ‚Ä¢ Restaurer tous les services" -ForegroundColor White
        
        if (!$Force) {
            $confirm = Read-Host "`nConfirmer l'ex√©cution? (OUI pour confirmer)"
            if ($confirm -ne "OUI") {
                Write-Host "‚ùå Ex√©cution annul√©e" -ForegroundColor Red
                exit
            }
        }
        
        Write-Host "`nüöÄ D√âBUT DE L'ORCHESTRATION" -ForegroundColor Green
        # TODO: Impl√©menter l'ex√©cution du plan
    }
    
    "Status" {
        Write-Host "`nüìä STATUT DE L'ORCHESTRATION" -ForegroundColor Cyan
        
        # V√©rifier Hyper-V
        Get-HyperVReplicationStatus
        
        # V√©rifier Veeam
        Get-VeeamStatus
        
        # TODO: R√©cup√©rer statut depuis SharePoint
    }
    
    "Test" {
        Write-Host "`nüß™ MODE TEST - V√©rification des fonctions" -ForegroundColor Magenta
        
        Write-Host "`nTest 1: D√©tection Hyper-V..." -ForegroundColor Yellow
        $hyperv = Get-HyperVReplicationStatus
        
        Write-Host "`nTest 2: D√©tection Veeam..." -ForegroundColor Yellow
        $veeam = Get-VeeamStatus
        
        Write-Host "`nTest 3: Cr√©ation plan..." -ForegroundColor Yellow
        $infrastructure = Get-Infrastructure
        $plan = Create-OrchestrationPlan -Infrastructure $infrastructure
        
        Write-Host "`n‚úÖ Tests termin√©s" -ForegroundColor Green
    }
    
    default {
        Write-Host "‚ùå Action non reconnue: $Action" -ForegroundColor Red
        Write-Host "`nActions disponibles:" -ForegroundColor Yellow
        Write-Host "  ‚Ä¢ Analyze - Analyser l'infrastructure"
        Write-Host "  ‚Ä¢ Plan    - Cr√©er un plan d'orchestration"
        Write-Host "  ‚Ä¢ Execute - Ex√©cuter l'orchestration"
        Write-Host "  ‚Ä¢ Status  - V√©rifier le statut"
        Write-Host "  ‚Ä¢ Test    - Mode test"
    }
}

Write-Host "`n‚úÖ Orchestrator $VERSION termin√©" -ForegroundColor Green