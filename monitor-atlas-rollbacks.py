#!/usr/bin/env python3
"""
ATLAS Auto-Update Manager - Gestion autonome des d√©ploiements
Surveille les rollbacks, analyse les erreurs, cr√©e des versions correctives
"""

import requests
import base64
import json
import time
import re
import subprocess
from datetime import datetime, timedelta
from typing import Dict, List, Optional

class ATLASUpdateManager:
    def __init__(self):
        self.tenant_id = "6027d81c-ad9b-48f5-9da6-96f1bad11429"
        self.client_id = "f7c4f1b2-3380-4e87-961f-09922ec452b4"
        self.client_secret = base64.b64decode("Z3Y0OFF+NHRkakY2RE9td1ZXSS5UdXJNcVcwaGJZZEpGRS5aeWFvaw==").decode()
        self.list_id = "94dc7ad4-740f-4c1f-b99c-107e01c8f70b"
        self.current_version = "5.5"
        self.repo_path = "/home/sq/SYAGA-CONSULTING/SYAGA-ATLAS-DASHBOARD"
        self.token = None
        
    def get_token(self) -> str:
        """Obtenir token OAuth pour SharePoint"""
        if self.token:
            return self.token
            
        body = {
            'grant_type': 'client_credentials',
            'client_id': f'{self.client_id}@{self.tenant_id}',
            'client_secret': self.client_secret,
            'resource': f'00000003-0000-0ff1-ce00-000000000000/syagacons.sharepoint.com@{self.tenant_id}'
        }
        
        response = requests.post(
            f'https://accounts.accesscontrol.windows.net/{self.tenant_id}/tokens/OAuth/2',
            data=body
        )
        
        if response.status_code == 200:
            self.token = response.json()['access_token']
            return self.token
        else:
            raise Exception(f"Auth failed: {response.status_code}")
    
    def get_sharepoint_data(self) -> List[Dict]:
        """R√©cup√©rer toutes les donn√©es SharePoint"""
        headers = {
            'Authorization': f'Bearer {self.get_token()}',
            'Accept': 'application/json;odata=verbose'
        }
        
        response = requests.get(
            f'https://syagacons.sharepoint.com/_api/web/lists(guid\'{self.list_id}\')/items?$top=500&$orderby=Modified desc',
            headers=headers
        )
        
        if response.status_code == 200:
            return response.json()['d']['results']
        return []
    
    def check_for_rollbacks(self) -> List[Dict]:
        """V√©rifier s'il y a eu des rollbacks"""
        data = self.get_sharepoint_data()
        rollbacks = []
        
        for item in data:
            hostname = item.get('Hostname', '') or item.get('Title', '')
            
            # Chercher les rapports de rollback
            if 'ROLLBACK_' in hostname:
                rollbacks.append({
                    'server': hostname.replace('ROLLBACK_', ''),
                    'failed_version': item.get('AgentVersion', '?'),
                    'reason': item.get('VeeamStatus', ''),
                    'timestamp': item.get('Modified', '')
                })
            
            # Chercher les logs d'erreur
            elif 'FAILED_LOGS_' in hostname:
                server = hostname.replace('FAILED_LOGS_', '')
                # Associer aux rollbacks
                for rb in rollbacks:
                    if rb['server'] == server:
                        rb['error_logs'] = item.get('VeeamStatus', '')
                        
        return rollbacks
    
    def analyze_error(self, error_log: str) -> Dict:
        """Analyser les logs d'erreur pour identifier le probl√®me"""
        analysis = {
            'type': 'unknown',
            'details': '',
            'fix_suggestion': ''
        }
        
        # Patterns d'erreurs courants
        if 'Get-WmiObject' in error_log or 'WMI' in error_log:
            analysis['type'] = 'wmi_error'
            analysis['details'] = 'Erreur WMI - Probablement Get-WmiObject obsol√®te'
            analysis['fix_suggestion'] = 'Remplacer Get-WmiObject par Get-CimInstance'
            
        elif 'access_token' in error_log or 'OAuth' in error_log:
            analysis['type'] = 'auth_error'
            analysis['details'] = 'Erreur authentification SharePoint'
            analysis['fix_suggestion'] = 'V√©rifier token et retry avec timeout'
            
        elif 'Invoke-RestMethod' in error_log:
            analysis['type'] = 'network_error'
            analysis['details'] = 'Erreur r√©seau/API'
            analysis['fix_suggestion'] = 'Ajouter retry et gestion erreurs r√©seau'
            
        elif 'ConvertFrom-Json' in error_log:
            analysis['type'] = 'json_error'
            analysis['details'] = 'Erreur parsing JSON'
            analysis['fix_suggestion'] = 'Ajouter validation JSON avant parsing'
            
        elif 'ScheduledTask' in error_log:
            analysis['type'] = 'task_error'
            analysis['details'] = 'Erreur t√¢che planifi√©e'
            analysis['fix_suggestion'] = 'V√©rifier permissions et existence t√¢che'
            
        return analysis
    
    def create_fixed_version(self, current_version: str, rollback_info: Dict) -> str:
        """Cr√©er une nouvelle version corrig√©e bas√©e sur l'analyse"""
        # Parser la version
        major, minor = map(int, current_version.split('.'))
        new_version = f"{major}.{minor + 1}"
        
        print(f"\nüîß Cr√©ation version corrective v{new_version}")
        print(f"   Bas√©e sur l'analyse de l'√©chec de v{rollback_info['failed_version']}")
        
        # Lire l'agent actuel
        agent_file = f"{self.repo_path}/public/agent-v{current_version}.ps1"
        with open(agent_file, 'r', encoding='utf-8') as f:
            agent_code = f.read()
        
        # Analyser l'erreur
        error_analysis = self.analyze_error(rollback_info.get('error_logs', ''))
        print(f"   Type d'erreur: {error_analysis['type']}")
        print(f"   D√©tails: {error_analysis['details']}")
        print(f"   Fix: {error_analysis['fix_suggestion']}")
        
        # Appliquer les corrections
        fixed_code = agent_code.replace(f'$version = "{current_version}"', f'$version = "{new_version}"')
        
        if error_analysis['type'] == 'wmi_error':
            # Remplacer Get-WmiObject par Get-CimInstance
            fixed_code = fixed_code.replace('Get-WmiObject', 'Get-CimInstance')
            fixed_code = fixed_code.replace('Win32_OperatingSystem', 'Win32_OperatingSystem')
            
        elif error_analysis['type'] == 'auth_error':
            # Ajouter retry sur auth
            fixed_code = fixed_code.replace(
                'Invoke-RestMethod -Uri "https://accounts.accesscontrol.windows.net',
                'Invoke-RestMethod -Uri "https://accounts.accesscontrol.windows.net" -TimeoutSec 30'
            )
            
        elif error_analysis['type'] == 'network_error':
            # Ajouter gestion d'erreur r√©seau
            fixed_code = fixed_code.replace('-EA Stop', '-EA Stop -TimeoutSec 30')
        
        # Ajouter un commentaire sur le fix
        fixed_code = fixed_code.replace(
            f'# ATLAS Agent v{new_version}',
            f'# ATLAS Agent v{new_version} - Auto-fix from v{rollback_info["failed_version"]} rollback\n# Fixed: {error_analysis["type"]}'
        )
        
        # Sauvegarder la nouvelle version
        new_agent_file = f"{self.repo_path}/public/agent-v{new_version}.ps1"
        with open(new_agent_file, 'w', encoding='utf-8') as f:
            f.write(fixed_code)
        
        print(f"   ‚úÖ Version v{new_version} cr√©√©e avec corrections")
        
        return new_version
    
    def deploy_version(self, version: str):
        """D√©ployer une nouvelle version"""
        print(f"\nüì¶ D√©ploiement v{version}")
        
        # Mettre √† jour install-latest.ps1
        install_file = f"{self.repo_path}/public/install-latest.ps1"
        with open(install_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        content = re.sub(
            r'\$LATEST_VERSION = "[^"]*"',
            f'$LATEST_VERSION = "{version}"',
            content
        )
        
        with open(install_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Git commit et push
        subprocess.run(['git', 'add', '-A'], cwd=self.repo_path)
        subprocess.run([
            'git', 'commit', '-m', 
            f'ü§ñ AUTO-FIX v{version} - Correction automatique apr√®s rollback\n\nVersion g√©n√©r√©e automatiquement suite √† analyse des logs d\'erreur'
        ], cwd=self.repo_path)
        subprocess.run(['git', 'push'], cwd=self.repo_path)
        
        print(f"   ‚úÖ v{version} d√©ploy√©e sur GitHub")
        
        # Cr√©er commande UPDATE_ALL
        self.create_update_command(version)
    
    def create_update_command(self, version: str):
        """Cr√©er commande UPDATE_ALL dans SharePoint"""
        headers = {
            'Authorization': f'Bearer {self.get_token()}',
            'Accept': 'application/json;odata=verbose',
            'Content-Type': 'application/json;odata=verbose'
        }
        
        update_data = {
            '__metadata': {'type': 'SP.Data.ATLASServersListItem'},
            'Title': 'UPDATE_ALL',
            'Hostname': 'UPDATE_ALL',
            'State': f'UPDATE_TO_v{version}',
            'AgentVersion': version,
            'Role': 'Command',
            'VeeamStatus': f'Auto-update to v{version} - Automated fix deployment',
            'LastContact': datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
        }
        
        response = requests.post(
            f'https://syagacons.sharepoint.com/_api/web/lists(guid\'{self.list_id}\')/items',
            headers=headers,
            json=update_data
        )
        
        if response.status_code == 201:
            print(f"   ‚úÖ Commande UPDATE_ALL cr√©√©e pour v{version}")
        else:
            print(f"   ‚ùå Erreur cr√©ation commande: {response.status_code}")
    
    def wait_and_monitor(self, version: str, wait_minutes: int = 15):
        """Attendre et surveiller le d√©ploiement"""
        print(f"\n‚è≥ Attente {wait_minutes} minutes pour laisser le temps au d√©ploiement...")
        print(f"   Version d√©ploy√©e: v{version}")
        print(f"   Si erreur ‚Üí Rollback automatique apr√®s 10 min")
        print(f"   Si succ√®s ‚Üí Les agents confirmeront leur update")
        
        end_time = datetime.now() + timedelta(minutes=wait_minutes)
        
        while datetime.now() < end_time:
            remaining = (end_time - datetime.now()).total_seconds() / 60
            print(f"   ‚è∞ Temps restant: {int(remaining)} minutes", end='\r')
            time.sleep(60)  # Check toutes les minutes
            
            # V√©rifier s'il y a d√©j√† des confirmations ou rollbacks
            data = self.get_sharepoint_data()
            confirmations = [d for d in data if f'UPDATE_CONFIRMED' in d.get('Title', '')]
            rollbacks = [d for d in data if 'ROLLBACK_' in d.get('Title', '')]
            
            if confirmations:
                print(f"\n   ‚úÖ Confirmations d√©tect√©es: {len(confirmations)} serveurs")
            if rollbacks:
                print(f"\n   ‚ö†Ô∏è  Rollbacks d√©tect√©s: {len(rollbacks)} serveurs")
                break
        
        print(f"\n‚úÖ Fin de la p√©riode d'attente")
    
    def run_update_cycle(self):
        """Ex√©cuter un cycle complet de mise √† jour"""
        print("\n" + "="*70)
        print("ü§ñ ATLAS AUTO-UPDATE MANAGER - Cycle autonome")
        print("="*70)
        
        iteration = 0
        max_iterations = 5  # Limite de s√©curit√©
        
        while iteration < max_iterations:
            iteration += 1
            print(f"\nüìç It√©ration {iteration}/{max_iterations}")
            
            # 1. V√©rifier les rollbacks
            print("\n1Ô∏è‚É£ V√©rification des rollbacks...")
            rollbacks = self.check_for_rollbacks()
            
            if not rollbacks:
                print("   ‚úÖ Aucun rollback d√©tect√©")
                
                # V√©rifier si tous les serveurs sont √† jour
                data = self.get_sharepoint_data()
                servers = {}
                for item in data:
                    hostname = item.get('Hostname', '')
                    if hostname in ['SYAGA-HOST01', 'SYAGA-HOST02', 'SYAGA-VEEAM01']:
                        servers[hostname] = item.get('AgentVersion', '?')
                
                if all(v == self.current_version for v in servers.values()):
                    print(f"   üéâ Tous les serveurs sont en v{self.current_version}")
                    print("   Mission accomplie !")
                    break
                else:
                    print(f"   ‚è≥ Serveurs pas encore tous √† jour")
                    print(f"      {servers}")
                    
            else:
                print(f"   ‚ö†Ô∏è {len(rollbacks)} rollback(s) d√©tect√©(s)")
                
                for rb in rollbacks:
                    print(f"\n   üìã Rollback sur {rb['server']}:")
                    print(f"      Version √©chou√©e: v{rb['failed_version']}")
                    print(f"      Raison: {rb['reason']}")
                    
                    if 'error_logs' in rb:
                        print(f"      Logs d'erreur disponibles")
                        
                        # 2. Cr√©er version corrective
                        print("\n2Ô∏è‚É£ Cr√©ation version corrective...")
                        new_version = self.create_fixed_version(self.current_version, rb)
                        self.current_version = new_version
                        
                        # 3. D√©ployer
                        print("\n3Ô∏è‚É£ D√©ploiement...")
                        self.deploy_version(new_version)
                        
                        # 4. Attendre
                        print("\n4Ô∏è‚É£ Monitoring...")
                        self.wait_and_monitor(new_version)
                        
                        break  # Traiter un rollback √† la fois
                    else:
                        print("      ‚è≥ En attente des logs d'erreur...")
                        time.sleep(120)  # Attendre 2 min que les logs arrivent
            
            # Pause entre it√©rations
            if iteration < max_iterations:
                print("\nüí§ Pause 2 minutes avant prochaine v√©rification...")
                time.sleep(120)
        
        print("\n" + "="*70)
        print("‚úÖ Fin du cycle auto-update")
        print("="*70)

if __name__ == "__main__":
    manager = ATLASUpdateManager()
    
    try:
        # D√©marrer avec la v5.5 d√©j√† d√©ploy√©e
        print("üöÄ D√©marrage AUTO-UPDATE MANAGER pour ATLAS")
        print(f"   Version actuelle d√©ploy√©e: v{manager.current_version}")
        
        # Cr√©er une commande UPDATE_ALL pour tester
        print("\nüì§ Envoi commande UPDATE_ALL pour v5.5...")
        manager.create_update_command("5.5")
        
        # Lancer le cycle
        manager.run_update_cycle()
        
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()